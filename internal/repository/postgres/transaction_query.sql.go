// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transaction_query.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (
        user_id,
        amount,
        type,
        status,
        description,
        transaction_date
    )
VALUES ($1, $2, $3, $4, $5, NOW())
`

type CreateTransactionParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	Amount      float64        `json:"amount"`
	Type        string         `json:"type"`
	Status      string         `json:"status"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.UserID,
		arg.Amount,
		arg.Type,
		arg.Status,
		arg.Description,
	)
	return err
}

const getUserTransactions = `-- name: GetUserTransactions :many
SELECT id, user_id, amount, type, status, description, transaction_date, created_at, updated_at, deleted_at
FROM transactions
WHERE user_id = $1
    and deleted_at IS NULL
ORDER BY transaction_date DESC
`

func (q *Queries) GetUserTransactions(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getUserTransactions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Type,
			&i.Status,
			&i.Description,
			&i.TransactionDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
