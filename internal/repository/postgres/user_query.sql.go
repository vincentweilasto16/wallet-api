// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, balance, created_at, updated_at, deleted_at
FROM users
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserBalance = `-- name: UpdateUserBalance :exec
UPDATE users
SET balance = $1, updated_at = NOW()
WHERE id = $2
AND deleted_at IS NULL
`

type UpdateUserBalanceParams struct {
	Balance float64   `json:"balance"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBalance, arg.Balance, arg.ID)
	return err
}
