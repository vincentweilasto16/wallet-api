// Code generated by MockGen. DO NOT EDIT.
// Source: ./postgres_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	sqlc "github.com/vincentweilasto16/wallet-api/internal/repository/postgres"
)

// MockIPostgresRepository is a mock of IPostgresRepository interface.
type MockIPostgresRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPostgresRepositoryMockRecorder
}

// MockIPostgresRepositoryMockRecorder is the mock recorder for MockIPostgresRepository.
type MockIPostgresRepositoryMockRecorder struct {
	mock *MockIPostgresRepository
}

// NewMockIPostgresRepository creates a new mock instance.
func NewMockIPostgresRepository(ctrl *gomock.Controller) *MockIPostgresRepository {
	mock := &MockIPostgresRepository{ctrl: ctrl}
	mock.recorder = &MockIPostgresRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostgresRepository) EXPECT() *MockIPostgresRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockIPostgresRepository) CreateTransaction(ctx context.Context, arg sqlc.CreateTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockIPostgresRepositoryMockRecorder) CreateTransaction(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockIPostgresRepository)(nil).CreateTransaction), ctx, arg)
}

// GetUserByID mocks base method.
func (m *MockIPostgresRepository) GetUserByID(ctx context.Context, id uuid.UUID) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIPostgresRepositoryMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIPostgresRepository)(nil).GetUserByID), ctx, id)
}

// GetUserTransactions mocks base method.
func (m *MockIPostgresRepository) GetUserTransactions(ctx context.Context, userID uuid.UUID) ([]sqlc.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactions", ctx, userID)
	ret0, _ := ret[0].([]sqlc.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTransactions indicates an expected call of GetUserTransactions.
func (mr *MockIPostgresRepositoryMockRecorder) GetUserTransactions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactions", reflect.TypeOf((*MockIPostgresRepository)(nil).GetUserTransactions), ctx, userID)
}

// UpdateUserBalance mocks base method.
func (m *MockIPostgresRepository) UpdateUserBalance(ctx context.Context, arg sqlc.UpdateUserBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockIPostgresRepositoryMockRecorder) UpdateUserBalance(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockIPostgresRepository)(nil).UpdateUserBalance), ctx, arg)
}
